// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: registry.capnp

#include "registry.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<28> b_ad571514d922b940 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     64, 185,  34, 217,  20,  21,  87, 173,
     15,   0,   0,   0,   2,   0,   0,   0,
      6,  30,   3,  57, 148,  87,  70, 146,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     22,   0,   0,   0,  72,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 113, 117, 101, 115, 116,  84, 121,
    112, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 100, 100,  78, 111, 100, 101,   0,
    113, 117, 101, 114, 121,  78, 111, 100,
    101,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ad571514d922b940 = b_ad571514d922b940.words;
#if !CAPNP_LITE
static const uint16_t m_ad571514d922b940[] = {0, 1};
const ::capnp::_::RawSchema s_ad571514d922b940 = {
  0xad571514d922b940, b_ad571514d922b940.words, 28, nullptr, m_ad571514d922b940,
  0, 2, nullptr, nullptr, nullptr, { &s_ad571514d922b940, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(RequestType_ad571514d922b940, ad571514d922b940);
static const ::capnp::_::AlignedData<51> b_ac0946294045fa6c = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    108, 250,  69,  64,  41,  70,   9, 172,
     15,   0,   0,   0,   1,   0,   1,   0,
      6,  30,   3,  57, 148,  87,  70, 146,
      1,   0,   7,   0,   0,   0,   2,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     74,   0,   0,   0,   4,   1,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  82,
    101, 113, 117, 101, 115, 116,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 255, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     70,   6,  19,  81, 140,  75, 245, 200,
     73,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0, 254, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     29,  49, 145, 127,  28,  41, 157, 199,
     49,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     64, 185,  34, 217,  20,  21,  87, 173,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 100, 100,  78, 111, 100, 101,   0,
    113, 117, 101, 114, 121,  78, 111, 100,
    101,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ac0946294045fa6c = b_ac0946294045fa6c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ac0946294045fa6c[] = {
  &s_ad571514d922b940,
  &s_c79d291c7f91311d,
  &s_c8f54b8c51130646,
};
static const uint16_t m_ac0946294045fa6c[] = {1, 2, 0};
static const uint16_t i_ac0946294045fa6c[] = {1, 2, 0};
const ::capnp::_::RawSchema s_ac0946294045fa6c = {
  0xac0946294045fa6c, b_ac0946294045fa6c.words, 51, d_ac0946294045fa6c, m_ac0946294045fa6c,
  3, 3, i_ac0946294045fa6c, nullptr, nullptr, { &s_ac0946294045fa6c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_c8f54b8c51130646 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     70,   6,  19,  81, 140,  75, 245, 200,
     31,   0,   0,   0,   1,   0,   1,   0,
    108, 250,  69,  64,  41,  70,   9, 172,
      1,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  82,
    101, 113, 117, 101, 115, 116,  46,  97,
    100, 100,  78, 111, 100, 101,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 116, 104,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 114, 116,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c8f54b8c51130646 = b_c8f54b8c51130646.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c8f54b8c51130646[] = {
  &s_ac0946294045fa6c,
};
static const uint16_t m_c8f54b8c51130646[] = {0, 1};
static const uint16_t i_c8f54b8c51130646[] = {0, 1};
const ::capnp::_::RawSchema s_c8f54b8c51130646 = {
  0xc8f54b8c51130646, b_c8f54b8c51130646.words, 49, d_c8f54b8c51130646, m_c8f54b8c51130646,
  1, 2, i_c8f54b8c51130646, nullptr, nullptr, { &s_c8f54b8c51130646, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_c79d291c7f91311d = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     29,  49, 145, 127,  28,  41, 157, 199,
     31,   0,   0,   0,   1,   0,   1,   0,
    108, 250,  69,  64,  41,  70,   9, 172,
      1,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  82,
    101, 113, 117, 101, 115, 116,  46, 113,
    117, 101, 114, 121,  78, 111, 100, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 116, 104,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c79d291c7f91311d = b_c79d291c7f91311d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c79d291c7f91311d[] = {
  &s_ac0946294045fa6c,
};
static const uint16_t m_c79d291c7f91311d[] = {0};
static const uint16_t i_c79d291c7f91311d[] = {0};
const ::capnp::_::RawSchema s_c79d291c7f91311d = {
  0xc79d291c7f91311d, b_c79d291c7f91311d.words, 35, d_c79d291c7f91311d, m_c79d291c7f91311d,
  1, 1, i_c79d291c7f91311d, nullptr, nullptr, { &s_c79d291c7f91311d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<67> b_beb5c98b7ec7be5a = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     90, 190, 199, 126, 139, 201, 181, 190,
     15,   0,   0,   0,   1,   0,   2,   0,
      6,  30,   3,  57, 148,  87,  70, 146,
      1,   0,   7,   0,   0,   0,   2,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      6,   1,   0,   0, 193,   1,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  82,
    101, 115, 112, 111, 110, 115, 101,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 255, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     43, 161, 117,  24, 156,  35,  19, 227,
    109,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0, 254, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     54,  38,  26, 169,  16, 177, 138, 149,
     89,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 100, 101,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,  77, 101, 115,
    115,  97, 103, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113, 117, 101, 114, 121,  78, 111, 100,
    101,   0,   0,   0,   0,   0,   0,   0,
     97, 100, 100,  78, 111, 100, 101,   0, }
};
::capnp::word const* const bp_beb5c98b7ec7be5a = b_beb5c98b7ec7be5a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_beb5c98b7ec7be5a[] = {
  &s_958ab110a91a2636,
  &s_e313239c1875a12b,
};
static const uint16_t m_beb5c98b7ec7be5a[] = {3, 0, 1, 2};
static const uint16_t i_beb5c98b7ec7be5a[] = {2, 3, 0, 1};
const ::capnp::_::RawSchema s_beb5c98b7ec7be5a = {
  0xbeb5c98b7ec7be5a, b_beb5c98b7ec7be5a.words, 67, d_beb5c98b7ec7be5a, m_beb5c98b7ec7be5a,
  2, 4, i_beb5c98b7ec7be5a, nullptr, nullptr, { &s_beb5c98b7ec7be5a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e313239c1875a12b = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     43, 161, 117,  24, 156,  35,  19, 227,
     32,   0,   0,   0,   1,   0,   2,   0,
     90, 190, 199, 126, 139, 201, 181, 190,
      1,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  82,
    101, 115, 112, 111, 110, 115, 101,  46,
    113, 117, 101, 114, 121,  78, 111, 100,
    101,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 114, 116,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e313239c1875a12b = b_e313239c1875a12b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e313239c1875a12b[] = {
  &s_beb5c98b7ec7be5a,
};
static const uint16_t m_e313239c1875a12b[] = {0};
static const uint16_t i_e313239c1875a12b[] = {0};
const ::capnp::_::RawSchema s_e313239c1875a12b = {
  0xe313239c1875a12b, b_e313239c1875a12b.words, 35, d_e313239c1875a12b, m_e313239c1875a12b,
  1, 1, i_e313239c1875a12b, nullptr, nullptr, { &s_e313239c1875a12b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_958ab110a91a2636 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     54,  38,  26, 169,  16, 177, 138, 149,
     32,   0,   0,   0,   1,   0,   2,   0,
     90, 190, 199, 126, 139, 201, 181, 190,
      1,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  82,
    101, 115, 112, 111, 110, 115, 101,  46,
     97, 100, 100,  78, 111, 100, 101,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 114, 116,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_958ab110a91a2636 = b_958ab110a91a2636.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_958ab110a91a2636[] = {
  &s_beb5c98b7ec7be5a,
};
static const uint16_t m_958ab110a91a2636[] = {0};
static const uint16_t i_958ab110a91a2636[] = {0};
const ::capnp::_::RawSchema s_958ab110a91a2636 = {
  0x958ab110a91a2636, b_958ab110a91a2636.words, 34, d_958ab110a91a2636, m_958ab110a91a2636,
  1, 1, i_958ab110a91a2636, nullptr, nullptr, { &s_958ab110a91a2636, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<30> b_bc03c4ab542e5747 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     71,  87,  46,  84, 171, 196,   3, 188,
     15,   0,   0,   0,   2,   0,   0,   0,
      6,  30,   3,  57, 148,  87,  70, 146,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    196,   1,   0,   0,   7,   2,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110,  84, 121, 112, 101,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 111, 100, 101,  65, 100, 100, 101,
    100,   0,   0,   0,   0,   0,   0,   0,
    110, 111, 100, 101,  68, 101, 108, 101,
    116, 101, 100,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bc03c4ab542e5747 = b_bc03c4ab542e5747.words;
#if !CAPNP_LITE
static const uint16_t m_bc03c4ab542e5747[] = {0, 1};
const ::capnp::_::RawSchema s_bc03c4ab542e5747 = {
  0xbc03c4ab542e5747, b_bc03c4ab542e5747.words, 30, nullptr, m_bc03c4ab542e5747,
  0, 2, nullptr, nullptr, nullptr, { &s_bc03c4ab542e5747, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(RegistryNotificationType_bc03c4ab542e5747, bc03c4ab542e5747);
static const ::capnp::_::AlignedData<53> b_933ae650ec6dd8aa = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    170, 216, 109, 236,  80, 230,  58, 147,
     15,   0,   0,   0,   1,   0,   1,   0,
      6,  30,   3,  57, 148,  87,  70, 146,
      1,   0,   7,   0,   0,   0,   2,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   2,   0,   0, 239,   2,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 255, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     20,  98,  40, 207, 167,   3, 155, 171,
     73,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0, 254, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    243,  16, 223,  95,  64, 162, 117, 255,
     53,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     71,  87,  46,  84, 171, 196,   3, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 111, 100, 101,  65, 100, 100, 101,
    100,   0,   0,   0,   0,   0,   0,   0,
    110, 111, 100, 101,  68, 101, 108, 101,
    116, 101, 100,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_933ae650ec6dd8aa = b_933ae650ec6dd8aa.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_933ae650ec6dd8aa[] = {
  &s_ab9b03a7cf286214,
  &s_bc03c4ab542e5747,
  &s_ff75a2405fdf10f3,
};
static const uint16_t m_933ae650ec6dd8aa[] = {1, 2, 0};
static const uint16_t i_933ae650ec6dd8aa[] = {1, 2, 0};
const ::capnp::_::RawSchema s_933ae650ec6dd8aa = {
  0x933ae650ec6dd8aa, b_933ae650ec6dd8aa.words, 53, d_933ae650ec6dd8aa, m_933ae650ec6dd8aa,
  3, 3, i_933ae650ec6dd8aa, nullptr, nullptr, { &s_933ae650ec6dd8aa, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_ab9b03a7cf286214 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     20,  98,  40, 207, 167,   3, 155, 171,
     36,   0,   0,   0,   1,   0,   1,   0,
    170, 216, 109, 236,  80, 230,  58, 147,
      1,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110,  46, 110, 111, 100, 101,
     65, 100, 100, 101, 100,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 116, 104,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 114, 116,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ab9b03a7cf286214 = b_ab9b03a7cf286214.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ab9b03a7cf286214[] = {
  &s_933ae650ec6dd8aa,
};
static const uint16_t m_ab9b03a7cf286214[] = {0, 1};
static const uint16_t i_ab9b03a7cf286214[] = {0, 1};
const ::capnp::_::RawSchema s_ab9b03a7cf286214 = {
  0xab9b03a7cf286214, b_ab9b03a7cf286214.words, 50, d_ab9b03a7cf286214, m_ab9b03a7cf286214,
  1, 2, i_ab9b03a7cf286214, nullptr, nullptr, { &s_ab9b03a7cf286214, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_ff75a2405fdf10f3 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    243,  16, 223,  95,  64, 162, 117, 255,
     36,   0,   0,   0,   1,   0,   1,   0,
    170, 216, 109, 236,  80, 230,  58, 147,
      1,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110,  46, 110, 111, 100, 101,
     68, 101, 108, 101, 116, 101, 100,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 116, 104,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 114, 116,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ff75a2405fdf10f3 = b_ff75a2405fdf10f3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ff75a2405fdf10f3[] = {
  &s_933ae650ec6dd8aa,
};
static const uint16_t m_ff75a2405fdf10f3[] = {0, 1};
static const uint16_t i_ff75a2405fdf10f3[] = {0, 1};
const ::capnp::_::RawSchema s_ff75a2405fdf10f3 = {
  0xff75a2405fdf10f3, b_ff75a2405fdf10f3.words, 50, d_ff75a2405fdf10f3, m_ff75a2405fdf10f3,
  1, 2, i_ff75a2405fdf10f3, nullptr, nullptr, { &s_ff75a2405fdf10f3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// RegistryRequest
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RegistryRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t RegistryRequest::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RegistryRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RegistryRequest::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RegistryRequest::AddNode
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RegistryRequest::AddNode::_capnpPrivate::dataWordSize;
constexpr uint16_t RegistryRequest::AddNode::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RegistryRequest::AddNode::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RegistryRequest::AddNode::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RegistryRequest::QueryNode
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RegistryRequest::QueryNode::_capnpPrivate::dataWordSize;
constexpr uint16_t RegistryRequest::QueryNode::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RegistryRequest::QueryNode::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RegistryRequest::QueryNode::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RegistryResponse
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RegistryResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t RegistryResponse::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RegistryResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RegistryResponse::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RegistryResponse::QueryNode
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RegistryResponse::QueryNode::_capnpPrivate::dataWordSize;
constexpr uint16_t RegistryResponse::QueryNode::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RegistryResponse::QueryNode::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RegistryResponse::QueryNode::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RegistryResponse::AddNode
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RegistryResponse::AddNode::_capnpPrivate::dataWordSize;
constexpr uint16_t RegistryResponse::AddNode::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RegistryResponse::AddNode::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RegistryResponse::AddNode::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RegistryNotification
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RegistryNotification::_capnpPrivate::dataWordSize;
constexpr uint16_t RegistryNotification::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RegistryNotification::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RegistryNotification::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RegistryNotification::NodeAdded
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RegistryNotification::NodeAdded::_capnpPrivate::dataWordSize;
constexpr uint16_t RegistryNotification::NodeAdded::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RegistryNotification::NodeAdded::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RegistryNotification::NodeAdded::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RegistryNotification::NodeDeleted
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RegistryNotification::NodeDeleted::_capnpPrivate::dataWordSize;
constexpr uint16_t RegistryNotification::NodeDeleted::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RegistryNotification::NodeDeleted::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RegistryNotification::NodeDeleted::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



