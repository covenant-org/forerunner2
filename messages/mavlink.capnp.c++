// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: mavlink.capnp

#include "mavlink.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<63> b_dae3aa1d4e2f3cf0 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    240,  60,  47,  78,  29, 170, 227, 218,
     14,   0,   0,   0,   1,   0,   2,   0,
    132,  75, 153, 241, 117, 224, 157, 228,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     22,   0,   0,   0,  89,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 118, 108, 105, 110, 107,  46,
     99,  97, 112, 110, 112,  58,  80, 111,
    115, 105, 116, 105, 111, 110,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    122,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dae3aa1d4e2f3cf0 = b_dae3aa1d4e2f3cf0.words;
#if !CAPNP_LITE
static const uint16_t m_dae3aa1d4e2f3cf0[] = {0, 1, 2};
static const uint16_t i_dae3aa1d4e2f3cf0[] = {0, 1, 2};
const ::capnp::_::RawSchema s_dae3aa1d4e2f3cf0 = {
  0xdae3aa1d4e2f3cf0, b_dae3aa1d4e2f3cf0.words, 63, nullptr, m_dae3aa1d4e2f3cf0,
  0, 3, i_dae3aa1d4e2f3cf0, nullptr, nullptr, { &s_dae3aa1d4e2f3cf0, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_c32d93cfdf0a7069 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    105, 112,  10, 223, 207, 147,  45, 195,
     14,   0,   0,   0,   1,   0,   1,   0,
    132,  75, 153, 241, 117, 224, 157, 228,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     91,   0,   0,   0, 137,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 118, 108, 105, 110, 107,  46,
     99,  97, 112, 110, 112,  58,  66,  97,
    116, 116, 101, 114, 121,  76, 101, 118,
    101, 108,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    112, 101, 114,  99, 101, 110, 116,  97,
    103, 101,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c32d93cfdf0a7069 = b_c32d93cfdf0a7069.words;
#if !CAPNP_LITE
static const uint16_t m_c32d93cfdf0a7069[] = {0};
static const uint16_t i_c32d93cfdf0a7069[] = {0};
const ::capnp::_::RawSchema s_c32d93cfdf0a7069 = {
  0xc32d93cfdf0a7069, b_c32d93cfdf0a7069.words, 35, nullptr, m_c32d93cfdf0a7069,
  0, 1, i_c32d93cfdf0a7069, nullptr, nullptr, { &s_c32d93cfdf0a7069, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_cdb7eebeff11dabf = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    191, 218,  17, 255, 190, 238, 183, 205,
     14,   0,   0,   0,   1,   0,   0,   0,
    132,  75, 153, 241, 117, 224, 157, 228,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    139,   0,   0,   0, 186,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 118, 108, 105, 110, 107,  46,
     99,  97, 112, 110, 112,  58,  84, 101,
    108, 101, 109, 101, 116, 114, 121,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     98,  97, 116, 116, 101, 114, 121,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    105, 112,  10, 223, 207, 147,  45, 195,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cdb7eebeff11dabf = b_cdb7eebeff11dabf.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cdb7eebeff11dabf[] = {
  &s_c32d93cfdf0a7069,
};
static const uint16_t m_cdb7eebeff11dabf[] = {0};
static const uint16_t i_cdb7eebeff11dabf[] = {0};
const ::capnp::_::RawSchema s_cdb7eebeff11dabf = {
  0xcdb7eebeff11dabf, b_cdb7eebeff11dabf.words, 33, d_cdb7eebeff11dabf, m_cdb7eebeff11dabf,
  1, 1, i_cdb7eebeff11dabf, nullptr, nullptr, { &s_cdb7eebeff11dabf, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_fa108fde63ebbf6f = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    111, 191, 235,  99, 222, 143,  16, 250,
     14,   0,   0,   0,   1,   0,   0,   0,
    132,  75, 153, 241, 117, 224, 157, 228,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    189,   0,   0,   0, 227,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 118, 108, 105, 110, 107,  46,
     99,  97, 112, 110, 112,  58,  79, 100,
    111, 109, 101, 116, 114, 121,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    240,  60,  47,  78,  29, 170, 227, 218,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fa108fde63ebbf6f = b_fa108fde63ebbf6f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fa108fde63ebbf6f[] = {
  &s_dae3aa1d4e2f3cf0,
};
static const uint16_t m_fa108fde63ebbf6f[] = {0};
static const uint16_t i_fa108fde63ebbf6f[] = {0};
const ::capnp::_::RawSchema s_fa108fde63ebbf6f = {
  0xfa108fde63ebbf6f, b_fa108fde63ebbf6f.words, 33, d_fa108fde63ebbf6f, m_fa108fde63ebbf6f,
  1, 1, i_fa108fde63ebbf6f, nullptr, nullptr, { &s_fa108fde63ebbf6f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// Position
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Position::_capnpPrivate::dataWordSize;
constexpr uint16_t Position::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Position::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Position::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BatteryLevel
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BatteryLevel::_capnpPrivate::dataWordSize;
constexpr uint16_t BatteryLevel::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BatteryLevel::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BatteryLevel::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Telemetry
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Telemetry::_capnpPrivate::dataWordSize;
constexpr uint16_t Telemetry::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Telemetry::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Telemetry::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Odometry
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Odometry::_capnpPrivate::dataWordSize;
constexpr uint16_t Odometry::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Odometry::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Odometry::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



